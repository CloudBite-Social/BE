// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"
	filters "sosmed/helpers/filters"

	mock "github.com/stretchr/testify/mock"

	posts "sosmed/features/posts"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *Repository) Create(ctx context.Context, data posts.Post) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, posts.Post) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, postId
func (_m *Repository) Delete(ctx context.Context, postId uint) error {
	ret := _m.Called(ctx, postId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, postId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUserId provides a mock function with given fields: ctx, userId
func (_m *Repository) DeleteByUserId(ctx context.Context, userId uint) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, postId
func (_m *Repository) GetById(ctx context.Context, postId uint) (*posts.Post, error) {
	ret := _m.Called(ctx, postId)

	var r0 *posts.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*posts.Post, error)); ok {
		return rf(ctx, postId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *posts.Post); ok {
		r0 = rf(ctx, postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, filter, userId
func (_m *Repository) GetList(ctx context.Context, filter filters.Filter, userId *uint) ([]posts.Post, int, error) {
	ret := _m.Called(ctx, filter, userId)

	var r0 []posts.Post
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, filters.Filter, *uint) ([]posts.Post, int, error)); ok {
		return rf(ctx, filter, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, filters.Filter, *uint) []posts.Post); ok {
		r0 = rf(ctx, filter, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]posts.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, filters.Filter, *uint) int); ok {
		r1 = rf(ctx, filter, userId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, filters.Filter, *uint) error); ok {
		r2 = rf(ctx, filter, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, postId, data
func (_m *Repository) Update(ctx context.Context, postId uint, data posts.Post) error {
	ret := _m.Called(ctx, postId, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, posts.Post) error); ok {
		r0 = rf(ctx, postId, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
